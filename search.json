[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"How to contribute","title":"How to contribute","text":"welcome third-party patches, essential advancing science architecture gaia. guidelines ask contributors follow, guidelines ease maintainers’ organizational logistical duties, encouraging development others. contributors agree abide code conduct.","code":""},{"path":"/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"How to contribute","text":"Make sure GitHub account. Clearly describe issue including steps reproduce bug. Discuss change affect gaia, thus whether ’s MAJOR, MINOR, PATCH. Interact project maintainers refine/change/prioritize issue identify branch targeted (see ). Trivial changes comments documentation require creating new issue. may post ideas gaia’s GitHub Discussions.","code":""},{"path":"/CONTRIBUTING.html","id":"making-changes","dir":"","previous_headings":"","what":"Making Changes","title":"How to contribute","text":"active development branch titled dev change PATCH, typically based current dev branch; MINOR, next minor release branch; MAJOR, next major release branch. example, writing branches dev, rc1.2 rc2.0, corresponding PATCH-MINOR-MAJOR start points respectively. never accept pull requests main branch. Check unnecessary whitespace git diff --check committing. Make sure commit messages descriptive succinct, describing changed , reference relevant issue number. Make commits logical units. Make sure added necessary tests changes. Tests included root tests directory facilitated using pytest installed development version gaia. See info using pytest : https://docs.pytest.org/en/7.4.x/contents.html Run tests assure nothing else accidentally broken.","code":""},{"path":"/CONTRIBUTING.html","id":"submitting-changes","dir":"","previous_headings":"","what":"Submitting Changes","title":"How to contribute","text":"Submit pull request. copyright code contributed, hereby grant PNNL unlimited license use code version future version gaia. reserve rights code. Somebody else owns copyright code contributed (e.g., employer part work ); authorized owner grant PNNL unlimited license use code version future version gaia, hereby . rights code reserved copyright owner. core team looks Pull Requests regular basis, respond soon possible.","code":""},{"path":"/CONTRIBUTING.html","id":"additional-resources","dir":"","previous_headings":"","what":"Additional Resources","title":"How to contribute","text":"General GitHub documentation GitHub pull request documentation","code":""},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"👋 Welcome!","title":"👋 Welcome!","text":"’re using Discussions place connect members community seek support. hope : Ask questions ’re wondering . Share ideas. Engage community members. Welcome others open-minded. Remember community build together 💪. get started go https://github.com/JGCRI/gaia/discussions just click New Discussions. Relevant discussions can converted issues needed. report bugs issues please see Contribute Page.","code":""},{"path":"/articles/vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"User Guide","text":"R (https://www.r-project.org/) R studio (https://www.rstudio.com/) Open R studio: Additional steps UBUNTU terminal Additional steps MACOSX terminal","code":"install.packages(\"devtools\") devtools::install_github(\"JGCRI/gaia\") install.packages(\"remotes\") remotes::install_github(\"JGCRI/gaia\") sudo add-apt-repository ppa:ubuntugis/ppa sudo apt-get update sudo apt-get install libudunits2-dev libgdal-dev libgeos-dev libproj-dev libmagick++-dev brew install pkg-config brew install gdal"},{"path":"/articles/vignette.html","id":"workflow-overview","dir":"Articles","previous_headings":"","what":"Workflow Overview","title":"User Guide","text":"gaia designed climate-driven empirical model core, integrated efficient modular structure. architecture streamlines entire workflow. workflow includes raw climate crop data processing, empirical model fitting, yield shock projections future climate scenarios, agricultural productivity change calculation Global Change Analysis Model (GCAM) (Calvin et al., 2019). modular design also facilitates comprehensive diagnostic outputs, enhancing tool’s utility researchers policymakers. primary functionality gaia encapsulated yield_impact wrapper function, executes entire workflow climate data processing yield shock estimation. Users can also execute individual functions work main steps process (Figure 1). weighted_climate: Processes CMIP6 daily monthly climate NetCDF data formatted accordance ISIMIP simulation protocols (details ) calculates cropland-weighted precipitation temperature country level, differentiated crop type irrigation type. crop_calendars: Generates crop planting months country crop based crop calendar data Sacks et al., (2010). data_aggregation: Calculates crop growing seasons using climate variables processed weighted_climate crop calendars historical projected periods. function prepares climate yield data subsequent model fitting. yield_regression: Performs regression analysis fitted historical annual crop yields, growing season monthly temperature precipitation, CO2 concentrations, GDP per capita. default econometric model applied gaia Waldhoff et al., (2020). User can specify alternative formulas consistent data processed data_aggregation. yield_shock_projection: Projects yield shocks future climate scenarios using fitted model temperature, precipitation, CO2 projections climate scenario. gcam_agprodchange: Remaps country-level yield shocks GCAM-required spatial scales (e.g., region, basin, intersections), based harvested areas, aggregates crops GCAM commodities. function applies projected shocks GCAM scenario agricultural productivity growth rates (unit used project future yields GCAM) creates ready--use XML outputs GCAM.   Figure 1: gaia workflow showing functions corresponding outputs modeling crop yield shocks climate variations using empirical econometric model.","code":""},{"path":"/articles/vignette.html","id":"example-climate-data","dir":"Articles","previous_headings":"","what":"Example Climate Data","title":"User Guide","text":"gaia requires global climate data Inter-Sectoral Impact Model Intercomparison Project (ISIMIP) data formatted according ISIMIP simulation protocols. Additionally, gaia supports climate data daily monthly time step. Due large size global climate data, provide two types example datasets tailored different user needs. Example Data 1: pre-processed climate dataset allows users quickly run gaia without need process raw climate NetCDF data. output gaia::weighted_climate function, converts raw climate NetCDF data cropland-weighted climate data country. dataset includes historical future pre-processed cropland-weighted precipitation temperature country. want quickly test gaia view outputs, easiest way get started. Example Data 2: climate dataset designed users want process raw climate NetCDF data using gaia::weighted_climate function. includes global monthly precipitation temperature NetCDF files 0.5-degree resolution, covering period 2015 2030. example climate data derived CanESM5 global climate model (GCM) Shared Socioeconomic Pathway-Representative Concentration Pathway (SSP-RCP) 2-4.5 scenario (O’Neil et al., 2016), also referred SSP245, part CMIP6 projections (Swart et al., 2019). climate projection bias-adjusted statistically downscaled using ISIMIP3BASD v2.5.0 approach (Lange, 2021; Lange, 2019). Processing data may take time. Please note selection GCMs SSP-RCP scenarios part gaia framework. dataset provided solely demonstration purpose. Users choose climate projections align research objectives. intend use climate datasets, example serve helpful reference setting workflow.  ISIMIP provides range bias-adjusted statistically downscaled climate forcing data 0.5-degree resolution. Bias adjustment process statistically modifying climate model outputs better align observed climate data, thereby reducing systematic errors biases. ensure consistency, simulated climate data bias-adjusted using historical climate observations used fit empirical model. example, ISIMIP’s current CMIP6 climate outputs bias-adjusted W5E5 v2.0 climate dataset using ISIMIP3BASD v2.5.0 approach. plan use climate observations simulations directly ISIMIP, please ensure : Bias-adjust statistically downscale data 0.5-degree resolution. can follow ISIMIP’s official ISIMIP3BASD v2.5.0 approach (Lange, 2021; Lange, 2019), use basd software developed Pacific Northwest National Laboratory. Format data according ISIMIP’s guidelines preparing simulation files terms NetCDF headers, grid format, variables dimensions, time axis. tips can found .","code":""},{"path":"/articles/vignette.html","id":"example-data-1-quick-start-dataset","dir":"Articles","previous_headings":"Example Climate Data","what":"Example Data 1: Quick Start Dataset","title":"User Guide","text":"Download example data 1 using instructions . dataset includes historical climate observations (1951-2001) future climate projections (2015-2100), weighted cropland areas formatted tabular structure (see Table 1), required gaia. historical climate Water Global Change (WATCH) forcing data (Weedon et al., 2011) climate projection derived CanESM5 SSP245 scenario (Swart et al., 2019). cropland-area-weighted, country-level climate data contains monthly precipitation temperature 26 crop types, distinguishing irrigated rainfed areas. two options download data: Option 1: Please use download url set data_dir directory downloaded folder; Option 2: Use gaia::get_example_data function following code chunk . , set paths historical future climate data folder.  default example historical climate data provided example data 1 based WATCH climate observations (Weedon et al., (2011)), used Waldhoff et al., (2020) empirical model fitting. intend modify assumptions historical climate forcing empirical model fitting, can use default regression model gaia, pre-fitted WATCH historical climate data, setting argument use_default_coeff = TRUE. loading gaia package, type coef_default view parameters default pre-fitted model. Alternatively, prefer use different historical climate data one example data 1, can use weighted_climate function generate cropland-weighted historical monthly precipitation temperature following weighted_climate instruction Explore Outputs section.","code":"data_dir <- 'path/to/downloaded/folder' # load gaia library(gaia)  # Path to the output folder. Change it to your desired location output_dir <- 'gaia_example/example_climate'  # Cropland-weighted historical and future climate data data_dir <- gaia::get_example_data(   download_url = 'https://zenodo.org/records/14888816/files/weighted_climate.zip?download=1',   data_dir = output_dir ) # Path to the folder that holds cropland-area-weighted precipitation and temperature TXT files # historical climate observation climate_hist_dir <- file.path(data_dir, 'climate_hist') # future projected climate climate_impact_dir <- file.path(data_dir, 'canesm5')"},{"path":"/articles/vignette.html","id":"example-data-2-raw-climate-data","dir":"Articles","previous_headings":"Example Climate Data","what":"Example Data 2: Raw Climate Data","title":"User Guide","text":"Download example data 2 using instructions . dataset includes future global monthly precipitation temperature 2015 2030 0.5-degree resolution, projected CanESM5 global climate model SSP245 scenario. use different climate model scenario, users can provide climate data NetCDF format. Note gaia adheres ISIMIP climate data format standard, NetCDF files formatted accordingly data directly downloaded ISIMIP. details ISIMIP format can found Tips Formatting Climate Forcing NetCDF section. two options download data: Option 1: Please use download url set data_dir directory downloaded folder; Option 2: Use gaia::get_example_data function following code chunk . , set paths climate files. climate forcing data, please follow guidance format data compatible gaia.  gaia requires climate NetCDF files follow basic formatting rules, specifically terms variables dimensions, spatial resolution, attributes instructed ISIMIP protocols. followings general formatting requirements ISIMIP compatible gaia. Variables Dimensions Variable names precipitation temperature pr tas, respectively. Every dimension associated coordinate variable. pr tas, include three dimensions (coordinate variables): time, lon, lat. Precision output variable float. Precision lon, lat time double. First dimension always time. Identifier dimensions variables lowercase without spaces. internal name dimensions (coordinate variables), standard_name, long_name, unit axis follow conventions table – long_name definitions critical dimensions, give us warnings format checks. Spatial Grid Resolution Global grid ranges 89.75 -89.75° latitude, ‐179.75 179.75° longitude, .e. 0.5° grid spacing, 360 rows 720 columns, 259200 grid cells total (corresponding resolution climate input data). Please report output data row-wise starting 89.75 -179.75, ending -89.75 179.75. Reporting intervals 0.5 degrees_east longitude, -0.5 degrees_north latitude. CDO gridtype lonlat (generic). requires longitude latitude variable dimension named ‘lon’ ‘lat’. Grid points simulate filled missing_value _FillValue marker (1.e+20f). Attributes variable’s attribute least include units. pr unit kg m-2 s-1, tas unit K. Standar NetCDF header look like :","code":"data_dir <- 'path/to/downloaded/folder' # load gaia library(gaia)  # Path to the output folder. Change it to your desired location output_dir <- 'gaia_example/example_climate'  # Future Climate Data data_dir <- gaia::get_example_data(   download_url = 'https://zenodo.org/records/14888816/files/gaia_example_climate.zip?download=1',   data_dir = output_dir ) # Path to the precipitation and temperature NetCDF files # NOTE: Each variable can have more than one file # projected climate data pr_projection_file <- file.path(data_dir, 'pr_monthly_canesm5_w5e5_ssp245_2015_2030.nc') tas_projection_file <- file.path(data_dir, 'tas_monthly_canesm5_w5e5_ssp245_2015_2030.nc') dimensions:    lon = 720 ;    lat = 360 ;    time = UNLIMITED ; variables:    double lon(lon) ;        lon:standard_name = \"longitude\" ;        lon:long_name = \"Longitude\" ;        lon:units = \"degrees_east\" ;        lon:axis = \"X\" ;     double lat(lat) ;        lat:standard_name = \"latitude\" ;        lat:long_name = \"Latitude\" ;        lat:units = \"degrees_north\" ;        lat:axis = \"Y\" ;     double time(time) ;        time:standard_name = \"time\" ;        lat:long_name = \"Time\" ;        time:units = \"days since 1661-01-01 00:00:00\" ;        time:calendar = \"proleptic_gregorian\" ;        time:axis = \"T\" ;     float tas(time, lat, lon) ;        tas:_FillValue = 1.e+20f ;        tas:missing_value = 1.e+20f ;        tas:units = “K\" ;        tas:standard_name = \"air_temperature\" ;        tas:long_name = “Near-Surface Air Temperature\" ;  // global attributes:        :contact = \"Your Contact Info <email>\";        :institution = \"Your Institution\";        :comment = \"Your comments\" ;"},{"path":[]},{"path":"/articles/vignette.html","id":"example-1","dir":"Articles","previous_headings":"Run gaia!","what":"Example 1","title":"User Guide","text":"example demonstrates complete gaia model workflow, including processing raw climate NetCDF data. Due large size climate dataset, process may take hour. quicker demonstration, please refer Example 2. example guides users complete gaia workflow, processing raw climate data calculating yield shocks response future climate variations. Please note provide NetCDF files future climate example data 2. historical model fitting, use pre-processed historical climate data example data 1 reduce computational demands, especially users without access high-performance computing. users historical climate data model fitting, can easily integrate specifying paths historical precipitation temperature NetCDF files using pr_hist_ncdf tas_hist_ncdf arguments, respectively. sure set climate_hist_dir = NULL bypass pre-processed historical dataset. Users can run gaia using single function yield_impact example data, streamlines entire workflow. detailed explanations argument yield_impact, please refer reference page. Intermediate outputs generated saved user-specified output folder. arguments climate_model, climate_scenario, member, bias_adj, cfe require specific strings provide climate model metadata output files. arguments impact gaia model simulation ; used populate climate data metadata outputs.","code":"# load gaia library(gaia)  # Path to the output folder. Change it to your desired location output_dir <- 'gaia_example/example_1_output'  # Run gaia # The full run with raw future climate data can take up to an hour gaia::yield_impact(   pr_hist_ncdf = NULL,                    # path to historical precipitation NetCDF file (must follow ISIMIP format); only if you wish to use your own historical precipitation observation   tas_hist_ncdf = NULL,                   # path to historical temperature NetCDF file (must follow ISIMIP format); only if you wish to use your own historical temperature observation   pr_proj_ncdf = pr_projection_file,      # path to future projected precipitation NetCDF file (must follow ISIMIP format)   tas_proj_ncdf = tas_projection_file,    # path to future projected temperature NetCDF file (must follow ISIMIP format)   timestep = 'monthly',                   # specify the time step of the NetCDF data (monthly or daily)   climate_hist_dir = climate_hist_dir,    # path to the folder that holds cropland weighted historical climate observations   historical_periods = c(1960:2001),      # vector of historical years selected for fitting   climate_model = 'canesm5',              # label of climate model name   climate_scenario = 'ssp245',            # label of climate scenario name   member = 'r1i1p1f1',                    # label of ensemble member name   bias_adj = 'w5e5',                      # label of climate data for bias adjustment for the global climate model (GCM)   cfe = 'no-cfe',                         # label of CO2 fertilization effect in the formula (default is no CFE)   gcam_version = 'gcam7',                 # output is different depending on the GCAM version (gcam6 or gcam7)   use_default_coeff = FALSE,              # set to TRUE when there is no historical climate data available   base_year = 2015,                       # GCAM base year   start_year = 2015,                      # start year of the projected climate data   end_year = 2030,                        # end year of the projected climate data   smooth_window = 20,                     # number of years as smoothing window   co2_hist = NULL,                        # historical annual CO2 concentration. If NULL, will use default value   co2_proj = NULL,                        # projected annual CO2 concentration. If NULL, will use default value   crop_select = NULL,                     # set to NULL for the default crops   diagnostics = TRUE,                     # set to TRUE to output diagnostic plots   output_dir = output_dir                 # path to the output folder )"},{"path":"/articles/vignette.html","id":"example-2","dir":"Articles","previous_headings":"Run gaia!","what":"Example 2","title":"User Guide","text":"example uses example weighted climate data described example data 1, processed cropland weights country level. weighted climate data generated using gaia::weighted_climate. example serves guide help users format data match weighted climate data structure raw climate data differs ISIMIP format. Running gaia directly weighted climate data requires minutes. stated previous note, users plan use WATCH forcing data example data 1 empirical model fitting, gaia already stored corresponding fitted coefficients. use pre-fitted regression coefficients, simply set use_default_coeff = TRUE climate_hist_dir = NULL example . simply save time rerun model regression. However, pre-fitted coefficients available limited selection 17 crops, including barley, cassava, cotton, groundnuts, maize, millet, pulses, rape_seed, rice, root_tuber, rye, sorghum, soybean, sugarbeet, sugarcane, sunflower, wheat. want include new crops beyond 17 crops, need provide data planting harvesting times update crop calendars (see instructions crop_calendars). , need provide historical climate forcing data following either Example 1 Example 2 conduct empirical fitting new crops. Example 1 Example 2 generate intermediate final outputs. Explore results output folder. detailed explanation outputs, checkout Explore Outputs section!","code":"# load gaia library(gaia)  # Path to the output folder. Change it to your desired location output_dir <- 'gaia_example/example_2_output'  # Run gaia gaia::yield_impact(   climate_hist_dir = climate_hist_dir,    # path to the folder that holds cropland weighted historical climate observations   climate_impact_dir = climate_impact_dir,# path to the folder that holds cropland weighted projected climate   timestep = 'monthly',                   # specify the time step of the NetCDF data (monthly or daily)   climate_model = 'canesm5',              # label of climate model name   climate_scenario = 'ssp245',            # label of climate scenario name   member = 'r1i1p1f1',                    # label of ensemble member name   bias_adj = 'w5e5',                      # label of climate data for bias adjustment   cfe = 'no-cfe',                         # label of CO2 fertilization effect in the formula (default is no CFE)   gcam_version = 'gcam7',                 # output is different depending on the GCAM version (gcam6 or gcam7)   use_default_coeff = FALSE,              # set to TRUE when there is no historical climate data available   base_year = 2015,                       # GCAM base year   start_year = 2015,                      # start year of the projected climate data   end_year = 2100,                        # end year of the projected climate data   smooth_window = 20,                     # number of years as smoothing window   co2_hist = NULL,                        # historical annual CO2 concentration. If NULL, will use default value   co2_proj = NULL,                        # projected annual CO2 concentration. If NULL, will use default value   crop_select = NULL,                     # set to NULL for the default crops   diagnostics = TRUE,                     # set to TRUE to output diagnostic plots   output_dir = output_dir                 # path to the output folder )"},{"path":"/articles/vignette.html","id":"explore-outputs","dir":"Articles","previous_headings":"","what":"Explore Outputs","title":"User Guide","text":"Example 1 Example 2 demonstrate use wrapper function yield_impact streamline entire workflows shown Figure 1. Section, provide additional details using function described Workflow Overview section example data explain associated outputs diagnostic plots . section can help better understand workflow structure outputs, allow make changes certain steps (e.g., crop calendars) needed. run Example 1 Example 2 successfully, outputs available. However, may choose run code snippet within subsection regenerate outputs prefer. Please note running following code snippets overwrite existing outputs corresponding output_dir.","code":""},{"path":"/articles/vignette.html","id":"weighted_climate","dir":"Articles","previous_headings":"Explore Outputs","what":"weighted_climate","title":"User Guide","text":"weighted_climate function calculates cropland-weighted monthly precipitation temperature projected climate. function can used wish calculate cropland-weighted monthly precipitation temperature using different climate forcing data. Please ensure climate NetCDF files follows ISIMIP simulation protocols. example data 1 includes standard ISIMIP-style climate data users check data structure format. example uses monthly precipitation (mm) temperature (degree C) projections 2015 2030 run climate data processing, please provide file paths precipitation temperature NetCDF files using pr_ncdf tas_ncdf arguments, respectively, adjust arguments accordingly match specifics climate data. Please note step may take 10 minutes complete. example create folder based specified climate_model argument (e.g., output_dir/weighted_climate/canesm5). Inside folder, find files containing precipitation temperature data weighted irrigated rainfed cropland areas 26 MIRCA2000 crops country level. file structure organized columns follows: [year, month, 1, 2, 3, ..., 265], numbers correspond country IDs. view country names associated IDs, simply type gaia::country_id R console loading gaia package. Outputs function: function return values. writes following output files output_dir/weighted_climate folder: [climate-model]_[climate-scenario]_month_precip_country_irc_[crop-number]_[start-year]_[end-year].csv: file irrigated cropland-area weighted precipitation certain climate model, scenario, crop. [climate-model]_[climate-scenario]_month_precip_country_rfd_[crop-number]_[start-year]_[end-year].csv: file rainfed cropland-area weighted precipitation certain climate model, scenario, crop. [climate-model]_[climate-scenario]_month_tmean_country_irc_[crop-number]_[start-year]_[end-year].csv: file irrigated cropland-area weighted temperature certain climate model, scenario, crop. [climate-model]_[climate-scenario]_month_tmean_country_rfd_[crop-number]_[start-year]_[end-year].csv: file rainfed cropland-area weighted temperature certain climate model, scenario, crop. example structure weighted precipitation data rainfed soybean. Table 1. Soybean-area-weighted precipitation weighted_climate function.","code":"library(gaia)  # Path to the output folder where you wish to save the outputs. Change it accordingly output_dir <- 'gaia_example/example_1_output'  # calculate weigted climate weighted_climate(pr_ncdf = pr_projection_file ,                  tas_ncdf = tas_projection_file ,                  timestep = 'monthly',                  climate_model = 'canesm5',                  climate_scenario = 'ssp245',                  time_periods = seq(2015, 2030, 1),                  output_dir = output_dir,                  name_append = NULL)"},{"path":"/articles/vignette.html","id":"crop_calendars","dir":"Articles","previous_headings":"Explore Outputs","what":"crop_calendars","title":"User Guide","text":"crop_calendars function calculates crop calendars based SAGE global crop planting harvesting dates data (Sacks et al., 2010). crop calendar outlines planting harvesting months predefined crop across global countries.gaia uses MIRCA2000 crop category (Portmann et al., 2010) standard crop types. code chunk runs crop_calendars default crops gaia: cassava, cotton, maize, rice, root_tuber, sorghum, soybean, sugarbeet, sugarcane, sunflower, wheat. Please note excluded countries cassava planting seasons longer two months, based SAGE data. extended planting periods SAGE data typically indicate multiple planting harvesting cycles, makes difficult identify yield individual harvest. Outputs function: function returns data frame crop calendars. also writes output output_dir/data_processed/crop_calendar.csv Table 2 provides example crop calendar structure. [plant, harvest] columns indicate planting harvesting months crops value 1 row. example, first row table, wheat Albania (iso: alb) planted November harvested June. Users can apply filter, filter(wheat == 1), display planting harvesting months countries wheat grown. Table 2. Crop calendar Select Additional Crops Beside default crops, users can select additional available crops (barley, groundnuts, millet, pulses, rape_seed, rye) using crop_select argument. crops available selection gaia based crop availability MIRCA2000 SAGE crop types. Note FAOSTAT crops categorized MIRCA2000 crop category. example selects barley millet addition default ones. Customized Crop Calendars Due limited crops SAGE, crops available MIRCA2000 included SAGE database, including oil_palm, citrus, date_palm, grapes, cocoa, coffee, others_perennial, fodder_grasses, others_annual. However, users data crop planting harvesting months crops certain countries, providing crop calendar file another way include new crops. course, suggested users provide planting harvesting months crop countries grow crop better results empirical model fitting. add new crop, simply follow established crop calendar format similar Table 2. code snippet shows example add crop crop calendar. name new crops need follow format crops listed (e.g., use oil_palm underscore instead oil palm). Table 3 shows updated crop calendar oil palm added. Table 3. Updated crop calendar oil palm Save updated crop calendar table CSV. option use gaia’s output_data function write output. Users can also use preferred ways write output. ’ve created crop calendar file, simply provide path updated crop calendar file crop_calendar_file argument crop_calendar function run subsequent steps use crop calendar data provided. , can provide path updated crop calendar file crop_calendar_file argument yield_impact wrapper function run entire workflow updated crop calendar.","code":"# Path to the output folder where you wish to save the outputs. Change it accordingly output_dir <- 'gaia_example/example_2_output'  # calculate crop calendars crop_cal <- crop_calendars(output_dir = output_dir)  # print result crop_cal # calculate crop calendars crop_cal <- crop_calendars(crop_select = c(\"barley\", \"millet\"),                            output_dir = output_dir)  # print result crop_cal # adding a new crop: oil_palm. The crop name should follow the crop names listed above. # Construct the structure of the data with oil_palm crop_add <- expand.grid(iso = c('ago', 'gha', 'lbr'),                         crops = c(names(crop_cal)[2:(ncol(crop_cal) - 2)], 'oil_palm')) %>%   dplyr::mutate(value = ifelse(crops == 'oil_palm', 1, 0)) %>%    tidyr::pivot_wider(names_from = 'crops', values_from = 'value', values_fill = 0)  # planting and harvesting month for countries with oil_palm crop_harvest_plant <- data.frame(iso = c('ago', 'gha', 'lbr'),                                  plant = c(2, 2, 2),                                  harvest  = c(9, 10, 9))  # complete the data structure with oil_palm added crop_add <- dplyr::left_join(crop_add, crop_harvest_plant, by = 'iso')  # bind the data to create updated crop calendars crop_cal_update <- crop_cal %>%    dplyr::bind_rows(crop_add) %>%    tidyr::replace_na(list(oil_palm = 0)) %>%    dplyr::select(-plant, -harvest, everything(), plant, harvest) %>%    dplyr::arrange(iso)  # view updated crop calendar crop_cal_update # Optional: save the update crop calendar to CSV if you haven't already # you can choose to use gaia's output_data function to write output gaia::output_data(   data = crop_cal_update,   file_name = 'crop_calendar_update.csv',   save_path = 'path/to/desired/folder' ) # Path to the output folder where you wish to save the outputs. Change it accordingly output_dir <- 'gaia_example/example_2_output'  # crop calendars crop_cal <- crop_calendars(crop_calendar_file = 'path/to/your/crop/calendar/file',                            output_dir = output_dir)"},{"path":"/articles/vignette.html","id":"data_aggregation","dir":"Articles","previous_headings":"Explore Outputs","what":"data_aggregation","title":"User Guide","text":"data_aggregation function calculates crop growing seasons using climate variables processed weighted_climate along crop calendars historical projected periods. function prepares climate yield data subsequent model fitting. Outputs function: data_aggregation function returns list historical projected weather variables crop data. also writes following output files output_dir/data_processed folder: historic_vars_[crop-name].csv: file summarizes historical harvest area (ha), irrigation type, annual yield (kg/ha), CO2 (ppm), growing season, precipitation (mm/month) temperature (degree C) country crop. example, historical information soybean illustrated Table 4. grow_season column binary value 1 indicates grow_month row considered growing season crop. weather_[climate-model]_[climate-scenario]_[crop-name].csv: file includes aggregated future weather data specified climate model/climate scenario/crop. example climate data soybean shown Table 5. output includes minimum, maximum, mean temperature, well precipitation, calculated monthly basis year, based cropland-weighted monthly precipitation temperature values. followings example outputs diagnostic plot data_aggregation function. Table 4. Aggregated historical information soybean.  Table 5. Aggregated future weather information soybean.","code":"# Path to the output folder where you wish to save the outputs. Change it accordingly output_dir <- 'gaia_example/example_2_output'  # aggregate crop and climate information at the country level data_agg <- data_aggregation(climate_hist_dir = climate_hist_dir,                              climate_impact_dir = climate_impact_dir,                              climate_model = 'canesm5',                              climate_scenario = 'ssp245',                              start_year = 2015,                              end_year = 2100,                              output_dir = output_dir)"},{"path":"/articles/vignette.html","id":"yield_regression","dir":"Articles","previous_headings":"Explore Outputs","what":"yield_regression","title":"User Guide","text":"gaia::yield_regression function performs empirical model fitting generates diagnostic plots comparing modeled yields FAO recorded yields crop type GCAM region scale. yield regression applies econometric model Waldhoff et al., (2020): yi,t=μi+λt+χmi,t+β1MeanTi,tMean+β2Mean(Ti,tMean)2+β1MinTi,tMin+β2Min(Ti,tMin)2+β1MaxTi,tMax+β2Max(Ti,tMax)2+γ1MeanPi,tMean+γ2Mean(Pi,tMean)2+γ1MinPi,tMin+γ2Min(Pi,tMin)2+γ1MaxPi,tMax+γ2Max(Pi,tMax)2\\begin{align} {y_{,t}} = \\ &{\\mu_i} + \\lambda t + \\chi {m_{,t}} + \\beta_1^{Mean}T_{,t}^{Mean} + \\beta_2^{Mean}{\\left( {T_{,t}^{Mean}} \\right)^2} \\\\\\ &+ \\beta_1^{Min}T_{,t}^{Min} + \\beta_2^{Min}{\\left( {T_{,t}^{Min}} \\right)^2} + \\beta_1^{Max}T_{,t}^{Max} \\\\\\ &+ \\beta_2^{Max}{\\left( {T_{,t}^{Max}} \\right)^2} + \\gamma_1^{Mean}P_{,t}^{Mean} + \\gamma_2^{Mean}{\\left( {P_{,t}^{Mean}} \\right)^2} \\\\\\ &+ \\gamma_1^{Min}P_{,t}^{Min} + \\gamma_2^{Min}{\\left( {P_{,t}^{Min}} \\right)^2} + \\gamma_1^{Max}P_{,t}^{Max} \\\\\\ &+ \\gamma_2^{Max}{\\left( {P_{,t}^{Max}} \\right)^2} \\end{align} , ii tt index countries years; yy mm natural logarithms yield per capita GDP; TkT^k PkP^k k∈(Mean,Min,Max)k \\\\left( {Mean,Min,Max} \\right) denote mean, minimum, maximum growing season monthly average daily temperature total precipitation country year; μ\\mu regression parameter indicating country fixed effects control heterogeneous unobserved time-invariant influences vary across countries; β1\\beta _1 β2\\beta _2 define response log yield average, minimum, maximum temperature, γ1\\gamma _1 γ2\\gamma _2 define response log yield average, minimum, maximum precipitation. Running yield_regression simple code chunk . Outputs function: yield_regression function return value. also writes following output files: reg_out_[crop-name]_[fit-name].csv: file located output_dir/data_processed folder contains statistics regression analysis crop. Table 6 show example output parameters fitted model soybean. weather_yield_[crop-name].csv: file located output_dir/data_processed folder contains values variables regression formula (e.g., min, max, mean temperature). model_[crop-name]_[fit-name].pdf: file located output_dir/figures folder diagnostic plot shows model fitting observed FAO data fitted crop yield across global countries. example comparison soybean illustrated Figure 2. followings example outputs diagnostic plot yield_regression function. Table 6. Fitted model soybean.   Figure 2: Model fitted yields versus FAO yields soybean.","code":"# Path to the output folder where you wish to save the outputs. Change it accordingly output_dir <- 'gaia_example/example_2_output'  # perform empirical regression yield_regression(diagnostics = TRUE,                  output_dir = output_dir)"},{"path":"/articles/vignette.html","id":"yield_shock_projection","dir":"Articles","previous_headings":"Explore Outputs","what":"yield_shock_projection","title":"User Guide","text":"gaia model completed fitting, gaia::yield_shock_projection function calculates projected annual yield shocks based input climate data. climate impact yield, known yield shock, refers fractional change crop’s yield within specific country future period, relative baseline yield otherwise obtain stable climate. concept mathematically defined Equations 3 6 Waldhoff et al., (2020). coarse-scale models like GCAM, gaia also computes smoothed yield shocks using user-specified smoothing window (default window 20 years). smoothed outputs, yield shocks base year set 1. results provided CSV outputs diagnostic plots. run yield_shock_projection, simply pass metadata climate model, climate scenario, base year, start end year climate data, smooth window function. code chunk shows example. Outputs function: yield_shock_projection function returns data frame formatted smoothed annual crop yield shocks climate impacts. also writes following output files: yield_impacts_annual/yield_[climate-model]_[climate-scenario]_[crop-name].csv: file includes annual crop yield shocks climate variability. example annual soybean yield shocks (column yield_impact) shown Table 7. yield_impacts_smooth/yield_[climate-model]_[climate-scenario]_[crop-name].csv: file includes smoothed annual crop yield shocks climate variability. default smoothing window 20 years. example smoothed annual soybean yield shocks shown Table 8. annual_projected_climate_impacts_[climate-model]_[climate-scenario]_[crop-name]_[fit-name].pdf: diagnostic plot annual crop yield shocks countries within different regions. located output_dir/figures folder. diagnostic plot annual soybean yield shocks illustrated Figure 3. smooth_projected_climate_impacts_[climate-model]_[climate-scenario]_[crop-name]_[fit-name].pdf: diagnostic plot smoothed annual crop yield shocks countries within different regions. located output_dir/figures folder. followings example outputs diagnostic plot yield_shock_projection function. Table 7. Annual yield shocks soybean.  Table 8. 20-year smoothed yield shocks soybean.   Figure 3: Projected yield shocks soybean.","code":"# Path to the output folder where you wish to save the outputs. Change it accordingly output_dir <- 'gaia_example/example_2_output'  # calculate projected yield shocks out_yield_shock <- yield_shock_projection(use_default_coeff = FALSE,                                           climate_model = 'canesm5',                                           climate_scenario = 'ssp245',                                           base_year = 2015,                                           start_year = 2015,                                           end_year = 2100,                                           smooth_window = 20,                                           diagnostics = TRUE,                                           output_dir = output_dir)"},{"path":"/articles/vignette.html","id":"gcam_agprodchange","dir":"Articles","previous_headings":"Explore Outputs","what":"gcam_agprodchange","title":"User Guide","text":"gcam_agprodchange function specifically designed Global Change Analysis Model (GCAM) (Calvin et al., 2019). GCAM requires agricultural productivity growth rate (APG) input, calculated based yield shocks baseline APG, varying according different SSP scenarios. Additionally, APG GCAM must region-basin scale. gaia::gcam_agprodchange function directly remaps country-level yield shocks region-basin APG. example , since climate_scenario = 'ssp245', automatically pick baseline APG SSP2 impact calculate climate-impacted APG based yield shocks computed previous step. climate_scenario set strings indicate ssp scenario, gaia use baseline APG without socioeconomic impact.  Outputs function: gcam_agprodchange function returns data frame agricultural productivity change. also writes following output files folder named [gcam-version]_agprodchange_[cfe] (e.g., gcam7_agprodchange_no-cfe): agyield_impact_[climate-model]_[ensemble-member]_[bias_adj]_[climate-scenario].xml: XML file agricultural productivity change commodities GCAM. figures_yield_impacts/[commodity.png]: diagnostic plot yield shocks GCAM commodity specified gcam_timestep (e.g., 5 years) basins within GCAM region (e.g., region-basin intersection) separated irrigated rainfed crop types. figures_agprodchange/[commodity.png]: diagnostic plot APG GCAM commodity specified gcam_timestep (e.g., 5 years) basins within GCAM region (e.g., region-basin intersection) separated irrigated rainfed crop types. example APG soybean shown Figure 4 .  Figure 4: Agricultural productivity growth rate soybean. line region indicates APG region-basin intersection.","code":"# Path to the output folder where you wish to save the outputs. Change it accordingly output_dir <- 'gaia_example/example_2_output'  # calculate region-basin agricultural productivity growth rate for GCAM gcam_apg <- gcam_agprodchange(data = out_yield_shock,                               climate_model = 'canesm5',                               climate_scenario = 'ssp245',                               member = 'r1i1p1f1',                               bias_adj = 'w5e5',                               cfe = 'no-cfe',                               gcam_version = 'gcam7',                               diagnostics = TRUE,                               output_dir = output_dir)"},{"path":"/articles/vignette.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"User Guide","text":"current version gaia several limitations users aware .","code":""},{"path":"/articles/vignette.html","id":"weather-data-aggregation-and-theoretical-consistency","dir":"Articles","previous_headings":"Limitations","what":"Weather Data Aggregation and Theoretical Consistency","title":"User Guide","text":"current implementation, gaia uses cropland area-weighted averages weather variables (e.g., temperature precipitation) construct country-level climate inputs. aggregation method commonly used empirical crop yield modeling, theoretical justification robust dependent variable (e.g., yield) linear form, can interpreted consistent approximation field-level data-generating process. However, gaia, dependent variable specified natural logarithm yield, allows us project future yield shocks based weather , allowing modelers use assumptions technological improvements driving yield improvements. context, use cropland-weighted average climate inputs might lead theoretical inconsistency. Specifically, yield assumed generated underlying nonlinear function weather field level (e.g., log(y)=f(T,P)log(y)=f(T,P)), aggregating climate variables applying function equivalent aggregating yield outcomes applying function field level. known issue related log-sum-exp transformation. limitation undermine empirical validity model, users aware aggregation procedure may interpretable field-level yield formulation. software currently supports cropland area-weighted climate offer alternative methods constructing climate inputs.","code":""},{"path":"/articles/vignette.html","id":"uncertainty-quantification","dir":"Articles","previous_headings":"Limitations","what":"Uncertainty Quantification","title":"User Guide","text":"gaia currently explicitly quantify uncertainty projected yield shock outcomes resulting uncertainty estimated econometric coefficients. gaia provides statistics regression analysis, perform uncertainty quantification, Monte Carlo simulations, propagate uncertainty model parameters final results. However, users provided necessary outputs (including coefficient estimates associated statistics reg_out_[crop]_xxx.csv files) implement analysis independently, desired. Back top","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mengqi Zhao. Author, maintainer. Stephanie Waldhoff. Author. Claudia Tebaldi. Author. Abigail Snyder. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhao M, Waldhoff S, Tebaldi C, Snyder (2025). gaia: gaia: R package estimate crop yield responses temperature precipitation. R package version 1.0.0, https://github.com/JGCRI/gaia.","code":"@Manual{,   title = {gaia: gaia: An R package to estimate crop yield responses to temperature and precipitation},   author = {Mengqi Zhao and Stephanie Waldhoff and Claudia Tebaldi and Abigail Snyder},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/JGCRI/gaia}, }"},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"gaia: An R package to estimate crop yield responses to temperature and precipitation","title":"gaia: An R package to estimate crop yield responses to temperature and precipitation","text":"gaia open-source R package designed estimate crop yield shocks response annual temperature precipitation variations CO2 concentrations country scale 12 major crops. gaia streamlines workflow raw climate data processing production different forms yield shocks, agricultural productivity changes region-basin level, can directly integrated latest Global Change Analysis Model (GCAM).","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"gaia: An R package to estimate crop yield responses to temperature and precipitation","text":"Zhao, M., Waldhoff, S., Tebaldi, C., Snyder, . 2024. gaia: R package estimate crop yield responses temperature precipitation. (progress) Journal Open Source Software, DOI: XXXX","code":""},{"path":"/index.html","id":"installation-guide","dir":"","previous_headings":"","what":"Installation Guide","title":"gaia: An R package to estimate crop yield responses to temperature and precipitation","text":"R (https://www.r-project.org/) R studio (https://www.rstudio.com/) Open R studio: Additional steps UBUNTU terminal Additional steps MACOSX terminal","code":"install.packages(\"devtools\") devtools::install_github(\"JGCRI/gaia\") install.packages(\"remotes\") remotes::install_github(\"JGCRI/gaia\") sudo add-apt-repository ppa:ubuntugis/ppa sudo apt-get update sudo apt-get install libudunits2-dev libgdal-dev libgeos-dev libproj-dev libmagick++-dev brew install pkg-config brew install gdal"},{"path":"/index.html","id":"related-publications","dir":"","previous_headings":"","what":"Related Publications","title":"gaia: An R package to estimate crop yield responses to temperature and precipitation","text":"Waldhoff, S.T., Wing, .S., Edmonds, J., Leng, G. Zhang, X., 2020. Future climate impacts global agricultural yields 21st century. Environmental Research Letters, 15(11), p.114010. https://doi.org/10.1088/1748-9326/abadcb","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"gaia: An R package to estimate crop yield responses to temperature and precipitation","text":"Whether find typo documentation, find bug, want develop functionality think make gaia robust, welcome contribute! contributing page walk processes contribute gaia.","code":""},{"path":"/reference/agprodchange_ni_gcam6.html","id":null,"dir":"Reference","previous_headings":"","what":"agprodchange_ni_gcam6 — agprodchange_ni_gcam6","title":"agprodchange_ni_gcam6 — agprodchange_ni_gcam6","text":"Agricultural productivity change (unitless) obtained GCAM6 Reference scenario. baseline APC used calculate climate impacted APC.","code":""},{"path":"/reference/agprodchange_ni_gcam6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"agprodchange_ni_gcam6 — agprodchange_ni_gcam6","text":"","code":"agprodchange_ni_gcam6"},{"path":"/reference/agprodchange_ni_gcam6.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"agprodchange_ni_gcam6 — agprodchange_ni_gcam6","text":"R data frame","code":""},{"path":"/reference/agprodchange_ni_gcam6.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"agprodchange_ni_gcam6 — agprodchange_ni_gcam6","text":"https://jgcri.github.io/gcam-doc/inputs_supply.html","code":""},{"path":"/reference/agprodchange_ni_gcam6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"agprodchange_ni_gcam6 — agprodchange_ni_gcam6","text":"","code":"if (FALSE) { # \\dontrun{  library(gaia);  agprodchange_ni_gcam6 <- gaia::agprodchange_ni_gcam6 } # }"},{"path":"/reference/agprodchange_ni_gcam7.html","id":null,"dir":"Reference","previous_headings":"","what":"agprodchange_ni_gcam7 — agprodchange_ni_gcam7","title":"agprodchange_ni_gcam7 — agprodchange_ni_gcam7","text":"Agricultural productivity change (unitless) obtained GCAM7 Reference scenario. baseline APC used calculate climate impacted APC.","code":""},{"path":"/reference/agprodchange_ni_gcam7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"agprodchange_ni_gcam7 — agprodchange_ni_gcam7","text":"","code":"agprodchange_ni_gcam7"},{"path":"/reference/agprodchange_ni_gcam7.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"agprodchange_ni_gcam7 — agprodchange_ni_gcam7","text":"R data frame","code":""},{"path":"/reference/agprodchange_ni_gcam7.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"agprodchange_ni_gcam7 — agprodchange_ni_gcam7","text":"https://jgcri.github.io/gcam-doc/inputs_supply.html","code":""},{"path":"/reference/agprodchange_ni_gcam7.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"agprodchange_ni_gcam7 — agprodchange_ni_gcam7","text":"","code":"if (FALSE) { # \\dontrun{  library(gaia);  agprodchange_ni_gcam7 <- gaia::agprodchange_ni_gcam7 } # }"},{"path":"/reference/clean_yield.html","id":null,"dir":"Reference","previous_headings":"","what":"clean_yield — clean_yield","title":"clean_yield — clean_yield","text":"Function clean FAO yield data","code":""},{"path":"/reference/clean_yield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean_yield — clean_yield","text":"","code":"clean_yield(fao_yield = NULL, fao_to_mirca = NULL)"},{"path":"/reference/clean_yield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean_yield — clean_yield","text":"fao_yield Default = NULL. Data frame fao yield table fao_to_mirca Default = NULL. Data frame fao mirca crop mapping","code":""},{"path":"/reference/clean_yield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean_yield — clean_yield","text":"data frame formatted FAO yield data","code":""},{"path":"/reference/co2_historical.html","id":null,"dir":"Reference","previous_headings":"","what":"co2_historical — co2_historical","title":"co2_historical — co2_historical","text":"Historical annual mean CO2 concentration (parts per million) NOAA https://gml.noaa.gov/ccgg/trends/global.html","code":""},{"path":"/reference/co2_historical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"co2_historical — co2_historical","text":"","code":"co2_historical"},{"path":"/reference/co2_historical.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"co2_historical — co2_historical","text":"object class data.table (inherits data.frame) 57 rows 2 columns.","code":""},{"path":"/reference/co2_historical.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"co2_historical — co2_historical","text":"ftp://aftp.cmdl.noaa.gov/products/trends/co2/co2_annmean_mlo.txt","code":""},{"path":"/reference/co2_historical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"co2_historical — co2_historical","text":"","code":"if (FALSE) { # \\dontrun{  library(gaia);  co2_historical <- gaia::co2_historical } # }"},{"path":"/reference/co2_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"co2_projection — co2_projection","title":"co2_projection — co2_projection","text":"Projected global annual mean CO2 concentration (parts per million) based GCAM7 Reference scenario, aligned RCP7.0. Obtained running default GCAM7 Reference scenario. default CO2 projection used gaia. User can update CO2 concentration preferred using argument co2_proj yield_impact function.","code":""},{"path":"/reference/co2_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"co2_projection — co2_projection","text":"","code":"co2_projection"},{"path":"/reference/co2_projection.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"co2_projection — co2_projection","text":"R data frame","code":""},{"path":"/reference/co2_projection.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"co2_projection — co2_projection","text":"https://gmd.copernicus.org/articles/12/677/2019/gmd-12-677-2019.html","code":""},{"path":"/reference/co2_projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"co2_projection — co2_projection","text":"","code":"if (FALSE) { # \\dontrun{  library(gaia);  co2_projection <- gaia::co2_projection } # }"},{"path":"/reference/coef_default.html","id":null,"dir":"Reference","previous_headings":"","what":"coef_default — coef_default","title":"coef_default — coef_default","text":"Regression coefficients generated `broom::tidy()` regression model using gaia's example historical climate data, including estimate, standard error, statistic, p-value, 17 default crops supported gaia.","code":""},{"path":"/reference/coef_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"coef_default — coef_default","text":"","code":"coef_default"},{"path":"/reference/coef_default.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"coef_default — coef_default","text":"R data frame","code":""},{"path":"/reference/coef_default.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"coef_default — coef_default","text":"Regression coefficients derived using default historical WATCH climate data","code":""},{"path":"/reference/coef_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"coef_default — coef_default","text":"","code":"if (FALSE) { # \\dontrun{  library(gaia);  coef_default <- gaia::coef_default } # }"},{"path":"/reference/country_id.html","id":null,"dir":"Reference","previous_headings":"","what":"country_id — country_id","title":"country_id — country_id","text":"Mapping country ID, country name, country ISO codes. table can used identify countries based IDs weighted climate files generated `gaia::weighted_climate` function. mode details, see User Guide.","code":""},{"path":"/reference/country_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"country_id — country_id","text":"","code":"country_id"},{"path":"/reference/country_id.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"country_id — country_id","text":"R data frame","code":""},{"path":"/reference/country_id.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"country_id — country_id","text":"country ID name mapping","code":""},{"path":"/reference/country_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"country_id — country_id","text":"","code":"if (FALSE) { # \\dontrun{  library(gaia);  country_id <- gaia::country_id } # }"},{"path":"/reference/crop_calendars.html","id":null,"dir":"Reference","previous_headings":"","what":"crop_calendars — crop_calendars","title":"crop_calendars — crop_calendars","text":"Generate planting months crop country using SAGE global crop planting harvesting dates data (Sacks et al., 2010).","code":""},{"path":"/reference/crop_calendars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"crop_calendars — crop_calendars","text":"","code":"crop_calendars(   crop_calendar_file = NULL,   crop_select = NULL,   output_dir = file.path(getwd(), \"output\") )"},{"path":"/reference/crop_calendars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"crop_calendars — crop_calendars","text":"crop_calendar_file Default = NULL. String path crop calendar file. crop_calendar_file provided, crop_select set crops crop calendar. User provided crop_calendar_file can include crops MIRCA2000 crops: \"wheat\", \"maize\", \"rice\", \"barley\", \"rye\", \"millet\", \"sorghum\", \"soybean\", \"sunflower\", \"root_tuber\", \"cassava\", \"sugarcane\", \"sugarbeet\", \"oil_palm\", \"rape_seed\", \"groundnuts\", \"pulses\", \"citrus\", \"date_palm\", \"grapes\", \"cotton\", \"cocoa\", \"coffee\", \"others_perennial\", \"fodder_grasses\", \"others_annual\" crop_select Default = NULL. Vector strings selected crops database. NULL, default crops used crop calendar: c(\"cassava\", \"cotton\", \"maize\", \"rice\", \"root_tuber\", \"sorghum\", \"soybean\", \"sugarbeet\", \"sugarcane\", \"sunflower\", \"wheat\"). additional crops available selection crop calendar database : \"barley\", \"groundnuts\", \"millet\", \"pulses\", \"rape_seed\", \"rye\" output_dir Default = file.path(getwd(), 'output'). String output directory","code":""},{"path":"/reference/crop_calendars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"crop_calendars — crop_calendars","text":"data frame crop calendars","code":""},{"path":"/reference/data_aggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"data_aggregation — data_aggregation","title":"data_aggregation — data_aggregation","text":"function calculates crop growing seasons using climate variables processed weighted_climate along crop calendars historical projected periods. function prepares climate yield data subsequent model fitting.","code":""},{"path":"/reference/data_aggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data_aggregation — data_aggregation","text":"","code":"data_aggregation(   climate_hist_dir = NULL,   climate_impact_dir = NULL,   climate_model = \"gcm\",   climate_scenario = \"rcp\",   historical_periods = NULL,   crop_calendar_file = NULL,   start_year = NULL,   end_year = NULL,   co2_hist = NULL,   co2_proj = NULL,   output_dir = file.path(getwd(), \"output\") )"},{"path":"/reference/data_aggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data_aggregation — data_aggregation","text":"climate_hist_dir Default = NULL. String path processed historical climate data folder climate_impact_dir Default = NULL. String path processed future climate data folder using weighted_climate function climate_model Default = NULL. String climate model (e.g., 'CanESM5') climate_scenario Default = NULL. String climate scenario (e.g., 'ssp245') historical_periods Default = NULL. Vector years subset historical climate data. NULL, use default climate data period crop_calendar_file Default = NULL. String path crop calendar file. crop_calendar_file provided, crop_select set crops crop calendar. User provided crop_calendar_file can include crops MIRCA2000 crops: \"wheat\", \"maize\", \"rice\", \"barley\", \"rye\", \"millet\", \"sorghum\", \"soybean\", \"sunflower\", \"root_tuber\", \"cassava\", \"sugarcane\", \"sugarbeet\", \"oil_palm\", \"rape_seed\", \"groundnuts\", \"pulses\", \"citrus\", \"date_palm\", \"grapes\", \"cotton\", \"cocoa\", \"coffee\", \"others_perennial\", \"fodder_grasses\", \"others_annual\" start_year Default = NULL. Integer  start year projected data end_year Default = NULL. Integer end year projected data co2_hist Default = NULL. Data table historical CO2 concentration columns [year, co2_conc]. NULL, use built-CO2 emission data co2_proj Default = NULL. Data table projected CO2 concentration columns [year, co2_conc]. NULL, use built-CO2 emission data output_dir Default = file.path(getwd(), 'output'). String output directory","code":""},{"path":"/reference/data_aggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data_aggregation — data_aggregation","text":"list historical projected weather variables crop data.","code":""},{"path":"/reference/gaia-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gaia: gaia: An R package to estimate crop yield responses to temperature and precipitation — gaia-package","title":"gaia: gaia: An R package to estimate crop yield responses to temperature and precipitation — gaia-package","text":"empirical model estimate annual crop yield responses temperature precipitation.","code":""},{"path":[]},{"path":"/reference/gaia-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gaia: gaia: An R package to estimate crop yield responses to temperature and precipitation — gaia-package","text":"Maintainer: Mengqi Zhao mengqi.zhao@pnnl.gov (ORCID) Authors: Stephanie Waldhoff Stephanie.Waldhoff@pnnl.gov (ORCID) Claudia Tebaldi claudia.tebaldi@pnnl.gov (ORCID) Abigail Snyder abigail.snyder@pnnl.gov (ORCID)","code":""},{"path":"/reference/gcam_agprodchange.html","id":null,"dir":"Reference","previous_headings":"","what":"gcam_agprodchange — gcam_agprodchange","title":"gcam_agprodchange — gcam_agprodchange","text":"Remaps country-level yield shocks GCAM-required spatial scales (e.g., region, basin, intersections), based harvested areas, aggregates crops GCAM commodities. function applies projected shocks GCAM scenario agricultural productivity growth rates (unit used project future yields GCAM) creates ready--use XML outputs GCAM.","code":""},{"path":"/reference/gcam_agprodchange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gcam_agprodchange — gcam_agprodchange","text":"","code":"gcam_agprodchange(   data = NULL,   gcamdata_dir = NULL,   climate_model = \"gcm\",   climate_scenario = \"rcp\",   member = \"member\",   bias_adj = \"ba\",   gcam_version = \"gcam7\",   gcam_timestep = 5,   cfe = \"no-cfe\",   base_year = 2015,   diagnostics = TRUE,   output_dir = file.path(getwd(), \"output\") )"},{"path":"/reference/gcam_agprodchange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gcam_agprodchange — gcam_agprodchange","text":"data Default = NULL. Output data frame function yield_shock_projection, similar format data gcamdata_dir Default = NULL. String directory gcamdata folder within specific GCAM version. gcamdata need run drake CSV outputs beforehand. climate_model Default = 'gcm'. String climate model name (e.g., 'CanESM5') climate_scenario Default = 'rcp'. String climate scenario name (e.g., 'ssp245') member Default = 'member'. String ensemble member name bias_adj Default = 'ba'. String dataset used climate data bias adjustment gcam_version Default = 'gcam7'. String GCAM version. support gcam6 gcam7 gcam_timestep Default = 5. Integer time step GCAM (Select either 1 5 years GCAM use) cfe Default = '-cfe'. String whether yield impact formula implimented CO2 fertilization effect. base_year Default = 2015. Integer base year (GCAM) diagnostics Default = TRUE. Logical performing diagnostic plot output_dir Default = file.path(getwd(), 'output'). String output directory","code":""},{"path":"/reference/gcam_agprodchange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gcam_agprodchange — gcam_agprodchange","text":"data frame formatted agricultural productivity change GCAM","code":""},{"path":"/reference/get_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"get_example_data — get_example_data","title":"get_example_data — get_example_data","text":"Download extract data URL.","code":""},{"path":"/reference/get_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_example_data — get_example_data","text":"","code":"get_example_data(   download_url = \"\",   file_extension = \"zip\",   data_dir = file.path(getwd(), \"example\"),   check_exist = TRUE )"},{"path":"/reference/get_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_example_data — get_example_data","text":"download_url Default = ”. Link downloadable dataset file_extension Default = 'zip'. String file extension without \".\" data_dir Default= file.path(getwd(), 'example'). Path desired location download data check_exist Default = TRUE. Binary check example data already exists. TRUE, function gives error downloaded folder already exist","code":""},{"path":"/reference/get_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_example_data — get_example_data","text":"string path data downloaded ","code":""},{"path":"/reference/get_example_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_example_data — get_example_data","text":"function downloads ZIP file specified URL extracts contents. designed downloading gaia example data, can used dataset long provided URL points single ZIP file.","code":""},{"path":"/reference/get_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_example_data — get_example_data","text":"","code":"if (FALSE) { # \\dontrun{ get_example_data(download_url = \"https://example.com/data.zip\", data_dir = \"downloaded_data\") } # }"},{"path":"/reference/input_data.html","id":null,"dir":"Reference","previous_headings":"","what":"input_data — input_data","title":"input_data — input_data","text":"read data output number rows columns variable names","code":""},{"path":"/reference/input_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"input_data — input_data","text":"","code":"input_data(   folder_path = NULL,   input_file = NULL,   skip_number = 0,   quietly = FALSE )"},{"path":"/reference/input_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"input_data — input_data","text":"folder_path Default = NULL. String folder path input_file Default = NULL. String name csv file read skip_number Default = 0. Integer number rows skip quietly Default= FALSE. Logical. TRUE output input data information; FALSE silent.","code":""},{"path":"/reference/input_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"input_data — input_data","text":"data table input CSV file","code":""},{"path":"/reference/output_data.html","id":null,"dir":"Reference","previous_headings":"","what":"output_data — output_data","title":"output_data — output_data","text":"write output","code":""},{"path":"/reference/output_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"output_data — output_data","text":"","code":"output_data(   data = NULL,   save_path = file.path(getwd(), \"output\"),   file_name = NULL,   is_figure = FALSE,   data_info = \"Data\" )"},{"path":"/reference/output_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"output_data — output_data","text":"data Default = NULL. Data frame save_path Default = NULL. String path output folder file_name Default = NULL. String file name is_figure Default = FALSE. Binary saving figure data_info Default = 'Data'. String describing data information","code":""},{"path":"/reference/output_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"output_data — output_data","text":"return value, called side effects writing output files","code":""},{"path":"/reference/weighted_climate.html","id":null,"dir":"Reference","previous_headings":"","what":"weighted_climate — weighted_climate","title":"weighted_climate — weighted_climate","text":"Processes CMIP6 daily monthly climate NetCDF data formatted accordance ISIMIP simulation protocols (details ) calculates cropland-weighted precipitation temperature country level, differentiated crop type irrigation type.","code":""},{"path":"/reference/weighted_climate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weighted_climate — weighted_climate","text":"","code":"weighted_climate(   pr_ncdf = NULL,   tas_ncdf = NULL,   timestep = \"monthly\",   climate_model = \"gcm\",   climate_scenario = \"rcp\",   time_periods = NULL,   crop_names = NULL,   output_dir = file.path(getwd(), \"output\"),   name_append = NULL )"},{"path":"/reference/weighted_climate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weighted_climate — weighted_climate","text":"pr_ncdf Default = NULL. List paths precipitation NetCDF files ISIMIP tas_ncdf Default = NULL. List paths temperature NetCDF files ISIMIP timestep Default = 'monthly'. String input climate data time step (e.g., 'monthly', 'daily') climate_model Default = NULL. String climate model (e.g., 'CanESM5') climate_scenario Default = NULL. String climate scenario (e.g., 'ssp245') time_periods Default = NULL. Vector years subset climate data. NULL, use default climate data period crop_names Default = NULL. String vector selected crops id names MIRCA2000. NULL, use MIRCA 26 crops. Crop names strings like 'irc_crop01', 'rfc_crop01', ..., 'irc_crop26', 'rfc_crop26' output_dir Default = file.path(getwd(), 'output'). String output directory name_append Default = NULL. String name append output folder","code":""},{"path":"/reference/weighted_climate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weighted_climate — weighted_climate","text":"return value, called side effects processing writing output files. output files include columns `[year, month, 1, 2, 3, ..., 265]`, numbers correspond country IDs. view country names associated IDs, simply type gaia::country_id R console loading gaia package.","code":""},{"path":"/reference/yield_impact.html","id":null,"dir":"Reference","previous_headings":"","what":"yield_impact — yield_impact","title":"yield_impact — yield_impact","text":"wrapper function runs entire workflow climate data processing yield shock estimation agricultural productivity change calculation Global Change Analysis Model (GCAM).","code":""},{"path":"/reference/yield_impact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yield_impact — yield_impact","text":"","code":"yield_impact(   pr_hist_ncdf = NULL,   pr_proj_ncdf = NULL,   tas_hist_ncdf = NULL,   tas_proj_ncdf = NULL,   timestep = \"monthly\",   historical_periods = NULL,   climate_hist_dir = NULL,   climate_impact_dir = NULL,   climate_model = \"gcm\",   climate_scenario = \"rcp\",   member = \"member\",   bias_adj = \"ba\",   cfe = \"no-cfe\",   gcam_version = \"gcam7\",   gcam_timestep = 5,   gcamdata_dir = NULL,   crop_calendar_file = NULL,   crop_select = NULL,   use_default_coeff = FALSE,   base_year = 2015,   start_year = NULL,   end_year = NULL,   smooth_window = 20,   co2_hist = NULL,   co2_proj = NULL,   diagnostics = TRUE,   output_dir = file.path(getwd(), \"output\") )"},{"path":"/reference/yield_impact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"yield_impact — yield_impact","text":"pr_hist_ncdf Default = NULL. List paths historical precipitation NetCDF files ISIMIP pr_proj_ncdf Default = NULL. List paths projected precipitation NetCDF files ISIMIP tas_hist_ncdf Default = NULL. List paths historical temperature NetCDF files ISIMIP tas_proj_ncdf Default = NULL. List paths projected temperature NetCDF files ISIMIP timestep Default = 'monthly'. String input climate data time step (e.g., 'monthly', 'daily') historical_periods Default = NULL. Vector years subset historical climate data. NULL, use default climate data period climate_hist_dir Default = NULL. String path historical precipitation temperature files irrigation type crop type. climate files must follow structure output weighted_climate function. Provide path argument pr_hist_ncdf tas_hist_ncdf NULL. climate_impact_dir Default = NULL. String path projected precipitation temperature files irrigation type crop type. climate files must follow structure output weighted_climate function. Provide path argument pr_proj_ncdf tas_proj_ncdf NULL. climate_model Default = 'gcm'. String climate model name (e.g., 'CanESM5') climate_scenario Default = 'rcp'. String climate scenario name (e.g., 'ssp245') member Default = 'member'. String ensemble member name bias_adj Default = 'ba'. String dataset used climate data bias adjustment cfe Default = '-cfe'. String whether yield impact formula implemented CO2 fertilization effect gcam_version Default = 'gcam7'. String GCAM version. support gcam6 gcam7 gcam_timestep Default = 5. Integer time step GCAM (Select either 1 5 years GCAM use) gcamdata_dir Default = NULL. String directory gcamdata folder within specific GCAM version. gcamdata need run drake CSV outputs beforehand. crop_calendar_file Default = NULL. String path crop calendar file. crop_calendar_file provided, crop_select set crops crop calendar. User provided crop_calendar_file can include crops MIRCA2000 crops: \"wheat\", \"maize\", \"rice\", \"barley\", \"rye\", \"millet\", \"sorghum\", \"soybean\", \"sunflower\", \"root_tuber\", \"cassava\", \"sugarcane\", \"sugarbeet\", \"oil_palm\", \"rape_seed\", \"groundnuts\", \"pulses\", \"citrus\", \"date_palm\", \"grapes\", \"cotton\", \"cocoa\", \"coffee\", \"others_perennial\", \"fodder_grasses\", \"other_annual\" crop_select Default = NULL. Vector strings selected crops database. NULL, default crops used crop calendar: c(\"cassava\", \"cotton\", \"maize\", \"rice\", \"root_tuber\", \"sorghum\", \"soybean\", \"sugarbeet\", \"sugarcane\", \"sunflower\", \"wheat\"). additional crops available selection crop calendar database : \"barley\", \"groundnuts\", \"millet\", \"pulses\", \"rape_seed\", \"rye\" use_default_coeff Default = FALSE. Binary using default regression coefficients. Set TRUE use default coefficients instead calculating coefficients historical climate data. base_year Default = 2015. Integer base year (GCAM) start_year Default = NULL. Integer  start year projected data end_year Default = NULL. Integer end year projected data smooth_window Default = 20. Integer smoothing window years co2_hist Default = NULL. Data table historical CO2 concentration columns [year, co2_conc]. NULL, use built-CO2 emission data co2_proj Default = NULL. Data table projected CO2 concentration columns [year, co2_conc]. NULL, use built-CO2 emission data diagnostics Default = TRUE. Logical performing diagnostic plot output_dir Default = file.path(getwd(), 'output'). String output directory","code":""},{"path":"/reference/yield_impact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"yield_impact — yield_impact","text":"data frame formatted agricultural productivity change GCAM","code":""},{"path":"/reference/yield_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"yield_regression — yield_regression","title":"yield_regression — yield_regression","text":"Performs regression analysis fitted historical annual crop yields, growing season monthly temperature precipitation, CO2 concentrations, GDP per capita. default econometric model applied gaia Waldhoff et al., (2020). User can specify alternative formulas consistent data processed `data_aggregation`.","code":""},{"path":"/reference/yield_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yield_regression — yield_regression","text":"","code":"yield_regression(   formula = NULL,   diagnostics = TRUE,   output_dir = file.path(getwd(), \"output\") )"},{"path":"/reference/yield_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"yield_regression — yield_regression","text":"formula Default = NULL. String regression formula diagnostics Default = TRUE. Logical performing diagnostic plot output_dir Default = file.path(getwd(), 'output'). String output directory","code":""},{"path":"/reference/yield_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"yield_regression — yield_regression","text":"return value, called side effects processing writing output files","code":""},{"path":"/reference/yield_shock_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"yield_shock_projection — yield_shock_projection","title":"yield_shock_projection — yield_shock_projection","text":"Projects yield shocks future climate scenarios using fitted model temperature, precipitation, CO2 projections climate scenario.","code":""},{"path":"/reference/yield_shock_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yield_shock_projection — yield_shock_projection","text":"","code":"yield_shock_projection(   use_default_coeff = FALSE,   climate_model = \"gcm\",   climate_scenario = \"rcp\",   base_year = 2015,   start_year = NULL,   end_year = NULL,   gcam_timestep = 5,   smooth_window = 20,   diagnostics = TRUE,   output_dir = file.path(getwd(), \"output\") )"},{"path":"/reference/yield_shock_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"yield_shock_projection — yield_shock_projection","text":"use_default_coeff Default = FALSE. Binary using default regression coefficients. Set TRUE use default coefficients instead calculating coefficients historical climate data. climate_model Default = NULL. String climate model (e.g., 'CanESM5') climate_scenario Default = NULL. String climate scenario (e.g., 'ssp245') base_year Default = 2015. Integer base year (GCAM) start_year Default = NULL. Integer  start year data end_year Default = NULL. Integer end year data gcam_timestep Default = 5. Integer time step GCAM (Select either 1 5 years GCAM use) smooth_window Default = 20. Integer smoothing window years diagnostics Default = TRUE. Logical performing diagnostic plot output_dir Default = file.path(getwd(), 'output'). String output directory","code":""},{"path":"/reference/yield_shock_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"yield_shock_projection — yield_shock_projection","text":"data frame formatted smoothed annual crop yield shocks climate impacts","code":""},{"path":"/news/index.html","id":"gaia-100","dir":"Changelog","previous_headings":"","what":"gaia 1.0.0","title":"gaia 1.0.0","text":"gaia powerful user-friendly tool designed estimate crop yield responses climate impacts, enabling robust projections streamlined workflows. Explore full capabilities User Guide.","code":""},{"path":[]},{"path":"/news/index.html","id":"general-features-1-0-0","dir":"Changelog","previous_headings":"Key Features of gaia:","what":"General Features:","title":"gaia 1.0.0","text":"Empirical Econometric Modeling: Estimate annual crop yield responses climate impacts using empirically grounded approach. Streamlined Workflow: Simplify analysis single wrapper function, yield_impact, running models efficiently. Data-Driven Insights: Leverage historical weather, CO2, crop yield data robust model fitting. Future Projections: Project annual yield shocks 12 crops using CMIP/ISIMIP bias-adjusted precipitation temperature datasets. gaia supports daily monthly climate data formats. Model Supports: Designed support Global Change Analysis Model (GCAM) well non-GCAM modeling frameworks.","code":""},{"path":"/news/index.html","id":"gcam-specific-features-1-0-0","dir":"Changelog","previous_headings":"Key Features of gaia:","what":"GCAM-Specific Features:","title":"gaia 1.0.0","text":"Ready--Use Outputs: Generate XML files agricultural productivity changes region-basin intersections, compatible GCAM. Version Compatibility: Supports GCAM v6.x v7.x. Flexible Time Steps: Offer options 5-year annual time steps GCAM. Scenario Flexibility: Choose various Shared Socioeconomic Pathways (SSPs) combination climate scenarios (e.g., RCPs).","code":""}]
